import { Component } from '@angular/core';
import { PosttestService } from './posttest.service';
import sha256 from "../../../../node_modules/fast-sha256/sha256";
export class PosttestComponent {
    constructor(server) {
        this.server = server;
        this.data = [];
        this.audiencePlay_hash = function (dataValue) {
            this.generated_hash = sha256(dataValue);
        };
        this.audiencePlay_add = function (dataType, traitName, traitValue) {
            var obj = { "dataType": dataType, "traitName": traitName, "traitValue": traitValue };
            this.data.push(obj);
        };
        this.audiencePlay_end = function () {
            if (this.hashedMobile && this.hashedEmail) {
                this.requestBody = {
                    "x_access_token": this.accessToken,
                    "adv_id": this.advertiserId,
                    "HashedEmail": this.hashedEmail,
                    "HashedMobile": this.hashedMobile,
                    "InformationGroup": this.informationGroup,
                    "data": this.data,
                    "eventDate": Math.floor(new Date().getTime() / 1000)
                };
            }
            else if (this.hashedMobile) {
                this.requestBody = {
                    "x_access_token": this.accessToken,
                    "adv_id": this.advertiserId,
                    "HashedMobile": this.hashedMobile,
                    "InformationGroup": this.informationGroup,
                    "data": this.data,
                    "eventDate": Math.floor(new Date().getTime() / 1000)
                };
            }
            else if (this.hashedEmail) {
                this.requestBody = {
                    "x_access_token": this.accessToken,
                    "adv_id": this.advertiserId,
                    "HashedEmail": this.hashedEmail,
                    "InformationGroup": this.informationGroup,
                    "data": this.data,
                    "eventDate": Math.floor(new Date().getTime() / 1000)
                };
            }
            else {
                this.requestBody = {
                    "x_access_token": this.accessToken,
                    "adv_id": this.advertiserId,
                    "InformationGroup": this.informationGroup,
                    "data": this.data,
                    "eventDate": Math.floor(new Date().getTime() / 1000)
                };
            }
        };
        this.audiencePlay_send = function () {
            console.log("requestBody", this.requestBody);
            return this.PosttestService.post(this.requestBody, this.publisherDomain).subscribe(data => {
                console.log("status", data);
            });
        };
    }
    audiencePlay_set(AccessToken, publisherDomain) {
        this.accessToken = AccessToken;
        this.publisherDomain = publisherDomain;
    }
    audiencePlay_setAdvertiserId(AdvertiserId) {
        this.advertiserId = AdvertiserId;
    }
    audiencePlay_setHashedEmail(hashedMailId) {
        this.hashedEmail = hashedMailId;
    }
    audiencePlay_setHashedMobile(hashedMobileNumber) {
        this.hashedMobile = hashedMobileNumber;
    }
    audiencePlay_start(InformationGroup) {
        this.informationGroup = InformationGroup;
    }
    ngOnInit() {
    }
}
PosttestComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-posttest',
                template: `
    <p>
      posttest works!
    </p>
  `
            },] }
];
PosttestComponent.ctorParameters = () => [
    { type: PosttestService }
];
//# sourceMappingURL=data:application/json;base64,